token Var (upper (letter | digit)+);
token Proc {"["} (letter)+ {"]"};
terminator Stm ".";
terminator Exp "";
-- separator Exp ",";
-- separator Stm ",";
SExp.  Stm ::= Keyword [Exp];
SCompound. Stm ::= Keyword [Exp] Keyword [Exp];
SBegin. Stm3 ::= "begin" Proc;
SEnd. Stm3 ::= "end" Proc;
-- SKey.  Stm ::= Keyword;

EVar.  Exp ::= Var;
EProc.  Exp ::= Proc;
EStr. Exp ::= String;
EKey. Exp3 ::= Keyword;
EOp. Exp3 ::= Operator;
EType. Exp3 ::= DataType;
EConst. Exp3 ::= Constant;
EInt. Exp2 ::= Integer;
EDoub. Exp2 ::= Double;
EAlgo. Exp4 ::= Algorithm;
ERead. Exp1 ::= "read" Var "from" Constant;

rules Keyword ::=
-- Input
"read" | "obtain" | "get" | "from" | "use" | "copy" | "expect" |
-- Output
"print" | "display" | "show" | "save" | "return" |
-- Compute
"compute" | "execute" | "calculate" | "determine" | "append" | "to" | "over" |
-- Initialize
"set" | "initialize" | "init" | "let" | "is" | "has" | "contains" | "be" |
-- Deviation
"increment" | "bump" | "decrement" |
-- Branching
"if" | "then" | "else" | "otherwise" | "when" | "unless" |
-- While
"while" | "done" | "endwhile" | "do" |
-- Case
"case" | "of" | "others" | "endcase" |
-- Repeat
"repeat" | "until" |
-- For
"for" | "endfor" |
-- Program Flow
"call" | "calling" | "exception" | "as" | "recurse" | "on" |
-- Selectors
"this" | "that" | "except" | "in" | "at" | "with" | "without" | "aside" |
-- Type Ops
"convert" | "cast" | "ensure" | "expecting" | 
-- Definition
"begin" | "end" | "rhizome" | "," | ":" |
-- Structure Ops
"where" | "containing" |
-- Uncertainty
"either";

rules Constant ::=
-- Booleans
"true" | "false" |
-- Unbound
"nonexistant" | "unbound" | "missing" | "null" |
-- Status
"success" | "failure" | "succeeds" | "fails" | "found" |
-- Formatting
"newline" | "beep" | "indent" |
-- Assumptions
"user" | "screen" | "system" |
-- Types of Procedures
"datum" | "data" | "caclulation" | "calculations" | "action" | "actions";
rules DataType ::=
-- Basics
"number" | "word" | "phrase" | "item" | "identifier" |
-- Extended Boolean
"truthy" | "falsey" |
-- Collections
"sequence" | "every" | "each" | "member" | "index" |
-- Abstractions
"nothing" | "maybe" | "symbol" | "many" | "any" | "object" |
-- Programming
"constant" | "operator" | "procedure" | "argument" | "parameter" |
-- OS
"file" | "stream" | "pipe" | "port" | "line" | "interrupt" |
-- Programming Refs
"value" | "name" | "result" | "message" | "field" | "an" | "a" | "the" |
-- Primitive Types
"integer" | "character" | "boolean" | "floating-point" | "fixed-point" |
"pointer" | "reference" | "enum" | "enumeration" |
-- Composite Types
"structure" | "array" | "record" | "tuple" | "string" | "union" | "variant" |
"coproduct" | "t-union" | "sum-type" | "product-type" |
-- Abstract Data Types
"list" | "set" | "suite" | "stack" | "queue" | "tree" |
"graph" | "heap" | "grid" | "hash-map" |
-- Concrete Data Types
"priority-queue" | "binary-tree" | "quad-tree" | "cons-list" |
"doubly-linked-list" | "k-d-tree" | "skip-list" | "linked-list" | "matrix" |
"lookup-table" | "bit-array" | "variable-length-array" | "dynamic-array" |
"gap-buffer" | "zipper" | "b-tree" | "binary-search-tree" | "b-plus-tree" |
"binary-heap" | "binomial-heap" | "radix-tree" | "suffix-tree" |
"ternary-tree" | "m-ary-tree" | "k-ary-tree" | "and-or-tree" | "spqr-tree" |
"in-tree" | "segment-tree" | "range-tree" | "bin" | "finger-tree" |
"bloom-filter" | "count-min-sketch" | "adjacency-list" | "adjacency-matrix" |
"decision-tree" | "directed-graph" | "undirected-graph" | "forest" |
"link-cut-tree" | "dynamic-tree" | "array-list" | "a-list" |
-- Plural Basics
"numbers" | "words" | "phrases" | "items" | "identifiers" |
-- Plural Collections
"sequences" | "members" | "indices" |
-- Plural Abstractions
"nothings" | "maybes" | "symbols" | "objects" |
-- Plural Programming
"constants" | "operators" | "procedures" | "arguments" | "parameters" |
-- Plural OS
"files" | "streams" | "pipes" | "ports" | "lines" | "interrupts" |
-- Plural Programming Refs
"values" | "names" | "results" | "messages" | "fields" |
-- Plural Primitive Types
"integers" | "characters" | "booleans" | "floating-points" | "fixed-points" |
"pointers" | "references" | "enums" | "enumerations" |
-- Plural Composite Types
"structures" | "arrays" | "records" | "tuples" | "strings" | "unions" |
"variants" | "coproducts" | "t-unions" | "sum-types" | "product-types" |
-- Plural Abstract Data Types
"lists" | "sets" | "suites" | "stacks" | "queues" | "trees" |
"graphs" | "heaps" | "grids" | "hash-maps" |
-- Plural Concrete Data Types
"priority-queues" | "binary-trees" | "quad-trees" | "cons-lists" |
"doubly-linked-lists" | "k-d-trees" | "skip-lists" | "linked-lists" |
"matrices" | "lookup-tables" | "bit-arrays" | "variable-length-arrays" |
"dynamic-arrays" | "gap-buffers" | "zippers" | "b-trees" |
"binary-search-trees" | "b-plus-trees" | "binary-heaps" | "binomial-heaps" |
"radix-trees" | "suffix-trees" | "ternary-trees" | "m-ary-trees" |
"k-ary-trees" | "and-or-trees" | "spqr-trees" | "in-trees" | "segment-trees" |
"range-trees" | "bins" | "finger-trees" | "bloom-filters" |
"count-min-sketches" | "adjacency-lists" | "adjacency-matrices" |
"decision-trees" | "directed-graphs" | "undirected-graphs" | "forests" |
"link-cut-trees" | "dynamic-trees" | "array-lists" | "a-lists" |
-- Imprecise Basics
"numberish" | "numbery" | "stringish" | "stringy" | "characterish" |
"charactery" | "booleanish" | "booleany" |
-- Imprecise Collections
"listish" | "listy" | "arrayish" | "array-y" | "sequenceish" |
"sequencey" | "memberish" | "membery" | "indexish" | "indexy" |
-- Imprecise Abstractions
"nothingish" | "nothingy" | "maybeish" | "maybe-y" | "symbolish" |
"symboly" | "objectish" | "objecty" |
-- Imprecise Programming
"constantish" | "constanty" | "operatorish" | "operatory" |
"procedureish" | "procedurey" | "argumentish" | "argumenty" |
"parameterish" | "parametery" |
-- Imprecise OS
"fileish" | "filey" | "streamish" | "streamy" | "pipeish" |
"pipey" | "portish" | "porty" | "lineish" | "liney" |
"interruptish" | "interrupty";

rules Operator ::=
-- Comparison 1
">" | "<" | "==" | "!=" | "<>" | "<=" | ">=" | "=" |
-- Comparison 2
"!<" | "!>" | "≡" | "≯" | "≮" | "≥" | "≤" | "≠" |
-- Arithmetic
"^" | "*" | "+" | "-" | "/" | "%" | "×" | "÷" |
-- Logical
"¬" | "⊻" | "∨" | "∧" | "⍱" | "⍲" |
-- Arrows 1
"<-" | "->" | "<-->" | "→" | "←" | "↑" | "↓" | "⇒" | "⇐" | "⇑" | "⇓" | "↔" |
-- Comparison Words 1
"less than" | "more than" | "greater than" | "equals" |
-- Comparison Words 2
"equal to" | "different than" | "different from" |
-- Arithmetic Words 1
"plus" | "minus" | "times" | "divided by" | "modulo" |
-- Arithmetic Words 4
"squared" | "cubed" | "root" | "square" | "cube" |
-- Logical Words
"not" | "xor" | "and" | "or" | "nand" | "nor" |
-- Arrows Words 1
"resulting in" | "fed to" | "right" | "left" | "leads to" |
-- Arrows Words 2
"results in" | "raise" | "lower" | "share" | "is equivalent to" |
-- Arrows Words 3
"taken from" | "stored in";

rules Algorithm ::=
-- Arithmetic
"sum" | "difference" | "product" | "quotient" | "remainder" | "modulus" |
"sign" | "reciprocal" | "magnitude" | "logarithm" |
-- Statistics
"average" | "mean" | "median" | "mode" | "range" |
-- Extrema
"max" | "maximum" | "min" | "minimum" | "maxima" | "minima" | "ceiling" |
"floor" |
-- Search Sort Filter
"sort" | "reverse" | "search" | "find" | "filter in" | "filter out" |
-- Grade Scan Map Reduce
"grade up" | "grade down" | "scan" | "map" | "reduce" | "expand" |
"replicate" |
-- Membership
"depth" | "match" | "tally" | "enlist" | "membership" | "pick" | "drop" |
"take" | "iota";


coercions Exp 4;
coercions Stm 4;
comment ";";
comment "/*" "*/";
