@c Variables: pseudotaxus Pseudotaxus Pseudocode
\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename pseudotaxus.info
@documentencoding UTF-8
@settitle Pseudotaxus Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2022 Christopher Rodriguez

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory Pseudocode
@direntry
* Pseudotaxus: (pseudotaxus).   
@end direntry

@titlepage
@title The Pseudotaxus Manual
@author Christopher Rodriguez

@page
@vskip 0pt plus 1filll

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Pseudotaxus

This document describes Pseudotaxus version @value{VERSION}.

@menu
* Introduction::                Why Pseudotaxus?

* Syntax::                      An Overview of the Syntax.
* Other Uses::                  Everything Else in Pseudotaxus.

* Concept Index::               Concepts Used, and Where.
* Programming Index::           Functions, Variables, Etc.

* Procedure Types::             Data, Calculations, and Actions.
* GNU FDL::                     The License for this Manual.

@detailmenu
 --- The Detailed Node Listing ---

Introduction
@c add other sections with subsections as above.
@c                              .
* A Simple Example::            Getting Stated with a single definition.
* A Longer Example::            To show off some of the more complex features.

Syntax

* Keywords::                    Each Recognized Keyword.
* Constants::                   Each Recognized Constant.
* Datatypes::                   Each Recognized Datatype.
* Operators::                   Each Recognized Operator.
* Algorithms::                  Each Recognized Algorithm.
* Punctuation::                 All Recognized Punctuation.
* Strings and Characters::      Dealing With Char Literals.
* Numbers::                     Dealing With Numeric Literals.
* Names::                       Referring to Other Definitons.

Other Uses

* Grafting::                    Turning Pseudocode Into Comments.
* Pruning::                     Decompile Algorithms into Longer Code.
* Pleaching::                   Compile Code into Shorter Algorithms.
* Arils::                       Convert Procedures Into Algorithms.
* Pseudarils::                  Convert Procedures Into Boilerplate.

@end detailmenu
@end menu

@c *********************************************************************
@node Introduction, A Simple Example, Top, Top
@chapter Introduction

Pseudotaxus is the result of me wanting a better, more defined dialect of
pseudocode and deciding to build one myself.

It was started when I needed to plan out software using pseudocode as an
undergraduate student, and at work. I found myself very dissatisfied with the
"Just write it out like normal speech" approach, and wanted something with a
bit more structure to it.

The hope is that it will become a useful planning tool for software projects,
at lease for myself.

@menu

* A Simple Example:: Getting Stated with a single definition.
* A Longer Example:: To show off some of the more complex features.

@end menu

@c *********************************************************************
@node A Simple Example, A Longer Example, Introduction, Introduction
@section A Simple Example

@c *********************************************************************
@node A Longer Example, Concept Index, A Simple Example, Introduction
@section A Longer Example

@c *********************************************************************
@node Syntax, Keywords, A Longer Example, Top
@chapter Syntax

Syntax is the name of the game here. 

@menu
* Keywords::                    Each Recognized Keyword.
* Constants::                   Each Recognized Constant.
* Datatypes::                   Each Recognized Datatype.
* Operators::                   Each Recognized Operator.
* Algorithms::                  Each Recognized Algorithm.
* Punctuation::                 All Recognized Punctuation.
* Strings and Characters::      Dealing With Char Literals.
* Numbers::                     Dealing With Numeric Literals.
* Names::                       Referring to Other Definitons.
@end menu
@c *********************************************************************
@node Keywords, Constants, Syntax, Syntax
@section Keywords
@c *********************************************************************
@node Constants, Datatypes, Keywords, Syntax
@section Constants
@c *********************************************************************
@node Datatypes, Operators, Constants, Syntax
@section Datatypes
@c *********************************************************************
@node Operators, Algorithms, Datatypes, Syntax
@section Operators
@c *********************************************************************
@node Algorithms, Punctuation, Operators, Syntax
@section Algorithms
@c *********************************************************************
@node Punctuation, Strings and Characters, Algorithms, Syntax
@section Punctuation
@c *********************************************************************
@node Strings and Characters, Numbers, Punctuation, Syntax
@section Strings and Characters
@c *********************************************************************
@node Numbers, Names, Strings and Characters, Syntax
@section Numbers
@c *********************************************************************
@node Names, Other Uses, Numbers, Syntax
@section Names
@c *********************************************************************
@node Other Uses, Grafting, Names, Top
@chapter Other Uses

@menu
* Grafting::                    Turning Pseudocode Into Comments.
* Pruning::                     Decompile Algorithms into Simpler Code.
* Pleaching::                   Compile Code into Shorter Algorithms.
* Arils::                       Convert Procedures Into Algorithms.
* Pseudarils::                  Convert Procedures Into Boilerplate.
@end menu
@c *********************************************************************
@node Grafting, Pruning, Other Uses, Other Uses
@section Grafting
@c *********************************************************************
@node Pruning, Pleaching, Grafting, Other Uses
@section Pruning
@c *********************************************************************
@node Pleaching, Arils, Pruning, Other Uses
@section Pleaching
@c *********************************************************************
@node Arils, Pseudarils, Pleaching, Other Uses
@section Arils
@c *********************************************************************
@node Pseudarils, Concept Index, Arils, Other Uses
@section Pseudarils


@c *********************************************************************
@node Concept Index, Programming Index, Introduction, Top
@chapter Concept Index
@printindex cp

@c *********************************************************************
@node Programming Index, Procedure Types, Concept Index, Top
@chapter Programming Index
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@c *********************************************************************
@node Procedure Types, GNU FDL, Programming Index, Top
@cindex Procedure Types
@include procedure-types.texi

@c *********************************************************************
@node GNU FDL, , Procedure Types, Top
@appendix GNU Free Documentation License
@cindex license, GNU Free Documentation License
@include fdl-1.3.texi

@c *********************************************************************
@bye
