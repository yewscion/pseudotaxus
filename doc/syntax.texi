@c *********************************************************************
@node Syntax, Keywords, A Longer Example, Top
@chapter Syntax

Any language is somewhat defined by its syntax, though oftentimes this means
something similar to "do it like C". As we're doing pseudocode here, such
conventions are not only unneeded, but also counterintuitive: They don't make
obvious what's going on to those not well versed in C@.

The syntax here was chosen as it is fairly easy for those outside of the
programming sphere to understand, as well as being able to express in a
consistent way most needed concepts in programming.

@menu
* Keywords::                    Each Recognized Keyword.
* Constants::                   Each Recognized Constant.
* Datatypes::                   Each Recognized Datatype.
* Operators::                   Each Recognized Operator.
* Algorithms::                  Each Recognized Algorithm.
* Punctuation::                 All Recognized Punctuation.
* Strings and Characters::      Dealing With Char Literals.
* Numbers and Ratios::          Dealing With Numeric Literals.
* Names::                       Referring to Other Definitons.
@end menu

@c *********************************************************************
@node Keywords, Constants, Syntax, Syntax
@section Keywords
@cindex Keywords
A keyword is, by and large, the building block of the pseudotaxus. It is a
word that expresses a fundamental concept, without specifying too much about
that concept.


These are different from Constants and Datatypes, as they are not nouns, but
verbs.

These are different from Operators, as they are not concerned with working
with specific types of arguments, but instead concerned with specific actions
the system might take.

These are different from Algorithms, as they are single actions, not sets of
actions.

@menu
* Procedure Definition::
* Input::
* Output::
* Transformation::
* Initialization::
* Deviation::
* Branching::
* Looping::
* Program Flow::
* Selectors::
* Type Operations::
* Ignored Keywords::
@end menu

@c *********************************************************************
@node Procedure Definition, Input, Keywords, Keywords
@subsection Procedure Definition
@cindex Defining a Procedure

@enumerate
@item
@anchor{begin}begin
@findex begin
@cindex Starting a Procedure

We are building programs here.

Programs are, in one view, simply collections of procedures that are executed
in an order on a machine. This keyword is how one can begin a new procedure.

It expects a single right argument: A name for the procedure. This is
followed by a period, and a newline.

This can be nested, though doing so will result in a very complicated program
(and is considered a girdling; @xref{Girdling}).

This keyword works with the @code{end} keyword; @xref{end}.

@example
begin [Procedure].
@end example

@item
@anchor{end}end
@findex end
@cindex Ending a Procedure
@cindex Ending a Loop

In Pseudotaxus, we don't have the convenience of S-Expressions or Brace
Blocks to mark where something ends.

Though it is possible to do so with whitespace, this introduces a significant
amount of ambiguityâ€”especially when copying, pasting, highlighting code in a
PDF or HTML website, or similar communication.

Therefore, the @code{end} keyword explicitly marks the end of things,
including procedure defintions and loop structures.

It expects a single right argument: A name of the thing that is ending. This
is followed by a period, and a newline. If there is no such thing to end,
this will produce an error.

@example
end [Procedure].
end for.
end while.
end Foo.
@end example

@item
@anchor{take}take
@findex take
@cindex Naming Procedure Parameters

This keyword is meant to be used immediately following a use of @code{begin}
to define a procedure. It specifies the parameters that a procedure accepts
as arguments, giving them names to be used in the procedure defintion (and
optionally specifying their @code{Datatype}; @xref{expecting}).

It expects numerous right arguments which are all variable names;
@xref{Names}. These should be a comma-separated list (@pxref{Comma}). This
should be followed by the @code{as} keyword and the @code{arguments} datatype
(@pxref{arguments}), and then either a period and a newline, or by another
comma and a newline followed by an @code{expecting} call.

@example
begin [Procedure].
      take Foo, Bar, and Baz as arguments.
end [Procedure].

begin [Procedure2].
      take Foo as an argument,
      expecting a string.
end [Procedure2].
@end example

@end enumerate

@c *********************************************************************
@node Input, Output, Procedure Definition, Keywords
@subsection Input
@cindex Getting Data from the Outside World.

Data is usually not hard-coded into programs (at least not anymore). It's
usually necessary to get the information from other places, be it user input,
reading a file, or making a copy of something.

@enumerate
@item
@anchor{read}read
@findex read
@cindex Handling Input

Perhaps it's my Lisp background showing through, but the most basic of input
operations to me is the idea of "reading" it in.

It expects a variable name as its right argument; @xref{Names}. This should
be followed by the @code{from} keyword (@pxref{from}) and one of the
@code{assumption} constants (@pxref{Assumptions}). This is then followed by
either a period and a newline, or by another comma and a newline followed by
an @code{expecting} call; @xref{expecting}.

@example
begin [Procedure].
      let File be the file at "./test.txt".
      read Variable from user.
      read Variable2 from File,
      expecting a string.
      display Variable.
      display Variable2.
end [Procedure].
@end example

@item
@anchor{obtain}obtain
@findex obtain
@cindex Converting Input


This is a synonym for @code{read}, but with the assumption of immediate
processing in a @code{colon} statement; @xref{Colon}.

@example
begin [Procedure].
      obtain Variable from user:
             convert to number.
      obtain Variable2 from File:
             increment.
end [Procedure].
@end example

@item
@anchor{get}get
@findex get
@cindex Input from User

This is a synonym for @code{read}, but with the assumption of user input.

@example
begin [Procedure].
      get Variable.
      get Variable2,
      expecting a string.
end [Procedure].
@end example

@item
@anchor{from}from
@findex from
@cindex Specifying Data Sources

The @code{from} keyword sets where @code{read} and @code{obtain} get their
input from.

@example
begin [Procedure].
      read Variable from user.
end [Procedure].
@end example

@item
@anchor{use}use
@findex use
@cindex Mutable Data from Other Sources


The @code{use} keyword specifies that, rather than getting input like
@code{read} and friends, we are instead using some other source of data as
the input for a Variable, be it a system function, the result of a procedure,
or simply the value of another variable.

This expects the following form, with three right arguments: The source, the
@code{as} keyword, and the destination. The source and destination can both
be any of a @code{name}, a @code{constant}, or a function @code{call} using
the @code{result} keyword.

@example
begin [Procedure].
      use Variable1 as Variable2.
      use the clock as Variable3.
      use the result of [Foo] as Variable 4.
end [Procedure].
@end example

@item
@anchor{copy}copy
@findex copy
@cindex Immutable Data from Other Sources

The @code{copy} keyword is a synonym for @code{use}, but with the explicit
assumption that a new, immutable copy is made of the value.

@example
begin [Procedure].
      copy Variable1 as Variable2.
      copy the clock as Variable3.
      copy the result of [Foo] as Variable 4.
end [Procedure].
@end example
@end enumerate

@c *********************************************************************
@node Output, Transformation, Input, Keywords
@subsection Output

@enumerate
@item
@anchor{print}print
The @code{print} keyword is the basic output keyword.

It expects any number of printable@footnote{In Pseudotaxus, a "printable"
argument can be anything, really, as in a conceptual way everything has a
printable representation: procedures have listings, structures have a written
structure, and abstract concepts generally have a representation within the
context of a computing system.

The "printable" designation is therefore mostly a reminder that this will be
shown and not run, and this kind of distinction is really only carried over
into homoiconic languages, such as lisp. In non-homoiconic destination
languages, this kind of generalization requires much more work on the
programming side, as new variables need to be populated when printing a
procedure or an object.} right arguments, followed by the @code{to} keyword
(@pxref{to}) and one of the @code{assumption} constants
(@pxref{Assumptions}).

@example
begin [Procedure].
      print "Hello World!" to screen.
      print newline to screen.
      print [Procedure] to file.
end [Procedure].
@end example

@item
@anchor{display}display

The @code{display} keyword is a synonym for @code{print}, with the assumption
of printing the right arguments to the screen, for the user to see. This
includes processing escapes, but does not include pretty-printing.

@example
begin [Procedure].
      display "Hello World!", newline.
end [Procedure].
@end example

@item
@anchor{show}show

The @code{display} keyword is a synonym for @code{print}, with the assumption
of printing the arguments in a pretty-printed or formatted way, in a similar
way to how one might use the @code{format} or @code{printf} functions.

Note that this does @emph{not} imply printing to the screen, for the
user. The @code{to} keyword is still expected.

@example
begin [Procedure].
      show "First: ", Variable1, " Second: ", Variable2, to screen.
end [Procedure].
@end example

@item
@anchor{save}save

The @code{save} keyword is a synonym for @code{print}, with the assumption of
printing the right arguments to a file (possibly unspecified, as this is
pseudocode) in persistent storage.

To specify the file, the name @code{File} is customary to use as a local
binding. Each block can set this name, or it can be passed in as a
parameter. Using a global variable for this purpose is, like all globals,
considered a Girdling.

The writeout mode is unspecified by default, as this is pseudocode. To
specify this, use a comment after the above @code{File} designation.

@example
begin [Procedure].
      let File be the file at "./foo.txt".
      save "Hello World!", newline.
end [Procedure].
@end example

@item
@anchor{return}return

The @code{return} keyword allows the value in question to be substituted
directly in the program for the current procedure, as it does in many
programming languages: It exits the current block, returning the given value.

It expects a single right argument, which can be a constant, a keyword, a
procedure, a name, a datatype, or any other kind of value. This is followed
by a period, and a newline.

@example
begin [Procedure].
      return true.
end [Procedure].
@end example
@end enumerate

@c *********************************************************************
@node Transformation, Initialization, Output, Keywords
@subsection Transformation

@enumerate
@item
@anchor{compute}compute


@example

@end example

@item
@anchor{calculate}calculate


@example

@end example

@item
@anchor{determine}determine


@example

@end example

@item
@anchor{append}append


@example

@end example

@item
@anchor{to}to


@example

@end example

@item
@anchor{over}over


@example

@end example
@end enumerate

@c *********************************************************************
@node Initialization, Deviation, Transformation, Keywords
@subsection Initialization

@enumerate
@item
@anchor{set}set


@example

@end example

@item
@anchor{initialize}initialize


@example

@end example

@item
@anchor{init}init


@example

@end example

@item
@anchor{let}let


@example

@end example

@item
@anchor{is}is


@example

@end example

@item
@anchor{has}has


@example

@end example

@item
@anchor{contains}contains


@example

@end example

@item
@anchor{be}be


@example

@end example
@end enumerate

@c *********************************************************************
@node Deviation, Branching, Initialization, Keywords
@subsection Deviation

@enumerate
@item
@anchor{increment}increment


@example

@end example

@item
@anchor{bump}bump


@example

@end example

@item
@anchor{decrement}decrement


@example

@end example
@end enumerate

@c *********************************************************************
@node Branching, Looping, Deviation, Keywords
@subsection Branching

@enumerate
@item
@anchor{if}if


@example

@end example

@item
@anchor{then}then


@example

@end example

@item
@anchor{else}else


@example

@end example

@item
@anchor{otherwise}otherwise


@example

@end example

@item
@anchor{when}when


@example

@end example

@item
@anchor{unless}unless


@example

@end example

@item
@anchor{case}case


@example

@end example

@item
@anchor{of}of


@example

@end example

@item
@anchor{others}others


@example

@end example

@item
@anchor{endcase}endcase


@example

@end example
@end enumerate

@c *********************************************************************
@node Looping, Program Flow, Branching, Keywords
@subsection Looping

@enumerate
@item
@anchor{while}while


@example

@end example

@item
@anchor{done}done


@example

@end example

@item
@anchor{endwhile}endwhile


@example

@end example

@item
@anchor{do}do


@example

@end example

@item
@anchor{repeat}repeat


@example

@end example

@item
@anchor{until}until


@example

@end example

@item
@anchor{for}for


@example

@end example

@item
@anchor{endfor}endfor


@example

@end example
@end enumerate

@c *********************************************************************
@node Program Flow, Selectors, Looping, Keywords
@subsection Program Flow

@enumerate
@item
@anchor{call}call


@example

@end example

@item
@anchor{exception}exception


@example

@end example

@item
@anchor{as}as


@example

@end example

@item
@anchor{recurse}recurse


@example

@end example
@end enumerate

@c *********************************************************************
@node Selectors, Type Operations, Program Flow, Keywords
@subsection Selectors

@enumerate
@item
@anchor{this}this


@example

@end example

@item
@anchor{that}that


@example

@end example

@item
@anchor{except}except


@example

@end example

@item
@anchor{in}in


@example

@end example

@item
@anchor{at}at


@example

@end example

@item
@anchor{with}with


@example

@end example

@item
@anchor{without}without


@example

@end example

@item
@anchor{aside}aside


@example

@end example
@end enumerate

@c *********************************************************************
@node Type Operations, Ignored Keywords, Selectors, Keywords
@subsection Type Operations

@enumerate
@item
@anchor{convert}convert


@example

@end example

@item
@anchor{cast}cast


@example

@end example

@item
@anchor{ensure}ensure


@example

@end example

@item
@anchor{expecting}expecting


@example

@end example

@item
@anchor{expect}expect


@example

@end example
@end enumerate

@c *********************************************************************
@node Ignored Keywords, Constants, Type Operations, Keywords
@subsection Ignored Keywords

@enumerate
@item
@anchor{an}an


@example

@end example

@item
@anchor{a}a


@example

@end example

@item
@anchor{the}the


@example

@end example
@end enumerate



@c *********************************************************************
@node Constants, Datatypes, Keywords, Syntax 
@section Constants

@menu
* Booleans::
* Unbound::
* Status::
* Formatting::
* Assumptions::
@end menu

@c *********************************************************************
@node Booleans, Unbound, Constants, Constants
@subsection Booleans

@enumerate
@item
@anchor{true}true


@example

@end example

@item
@anchor{false}false


@example

@end example
@end enumerate

@c *********************************************************************
@node Unbound, Status, Booleans, Constants
@subsection Unbound

@enumerate
@item
@anchor{nonexistant}nonexistant


@example

@end example

@item
@anchor{unbound}unbound


@example

@end example

@item
@anchor{missing}missing


@example

@end example

@item
@anchor{null}null


@example

@end example
@end enumerate

@c *********************************************************************
@node Status, Formatting, Unbound, Constants
@subsection Status

@enumerate
@item
@anchor{success}success


@example

@end example

@item
@anchor{failure}failure


@example

@end example

@item
@anchor{succeeds}succeeds


@example

@end example

@item
@anchor{fails}fails


@example

@end example

@item
@anchor{found}found


@example

@end example
@end enumerate

@c *********************************************************************
@node Formatting, Assumptions, Status, Constants
@subsection Formatting

@enumerate
@item
@anchor{newline}newline


@example

@end example

@item
@anchor{beep}beep


@example

@end example

@item
@anchor{indent}indent


@example

@end example
@end enumerate

@c *********************************************************************
@node Assumptions, Datatypes, Formatting, Constants
@subsection Assumptions

@enumerate
@item
@anchor{user}user


@example

@end example

@item
@anchor{screen}screen


@example

@end example

@item
@anchor{system}system


@example

@end example
@end enumerate

@c *********************************************************************
@node Datatypes, Operators, Constants, Syntax
@section Datatypes

@menu
* Basics::
* Extended Boolean::
* Collections::
* Abstractions::
* Programming::
* OS::
@end menu

@c *********************************************************************
@node Basics, Extended Boolean, Datatypes, Datatypes
@subsection Basics

@enumerate
@item
@anchor{number}number


@example

@end example

@item
@anchor{string}string


@example

@end example

@item
@anchor{character}character


@example

@end example

@item
@anchor{boolean}boolean


@example

@end example
@end enumerate

@c *********************************************************************
@node Extended Boolean, Collections, Basics, Datatypes
@subsection Extended Boolean

@enumerate
@item
@anchor{truthy}truthy


@example

@end example

@item
@anchor{falsey}falsey


@example

@end example
@end enumerate

@c *********************************************************************
@node Collections, Abstractions, Extended Boolean, Datatypes
@subsection Collections

@enumerate
@item
@anchor{list}list


@example

@end example

@item
@anchor{array}array


@example

@end example

@item
@anchor{sequence}sequence


@example

@end example

@item
@anchor{every}every


@example

@end example

@item
@anchor{each}each


@example

@end example

@item
@anchor{member}member


@example

@end example

@item
@anchor{index}index


@example

@end example
@end enumerate

@c *********************************************************************
@node Abstractions, Programming, Collections, Datatypes
@subsection Abstractions

@enumerate
@item
@anchor{nothing}nothing


@example

@end example

@item
@anchor{maybe}maybe


@example

@end example

@item
@anchor{symbol}symbol


@example

@end example

@item
@anchor{many}many


@example

@end example

@item
@anchor{any}any


@example

@end example

@item
@anchor{object}object


@example

@end example
@end enumerate

@c *********************************************************************
@node Programming, OS, Abstractions, Datatypes
@subsection Programming

@enumerate
@item
@anchor{constant}constant


@example

@end example

@item
@anchor{operator}operator


@example

@end example

@item
@anchor{procedure}procedure


@example

@end example

@item
@anchor{argument} @anchor{arguments}argument


@example

@end example

@item
@anchor{parameter}parameter


@example

@end example
@end enumerate

@c *********************************************************************
@node OS, Operators, Programming, Datatypes
@subsection OS

@enumerate
@item
@anchor{file}file


@example

@end example

@item
@anchor{stream}stream


@example

@end example

@item
@anchor{pipe}pipe


@example

@end example

@item
@anchor{port}port


@example

@end example

@item
@anchor{line}line


@example

@end example

@item
@anchor{interrupt}interrupt


@example

@end example
@end enumerate

@c *********************************************************************
@node Operators, Algorithms, Datatypes, Syntax
@section Operators

@menu
* Comparison::
* Mathematical::
* Logical::
* Arrows::
@end menu

@c *********************************************************************
@node Comparison, Mathematical, Operators, Operators
@subsection Comparison

@enumerate
@item
@anchor{less}less


@example

@end example

@item
@anchor{than}than


@example

@end example

@item
@anchor{more}more


@example

@end example

@item
@anchor{than (1)}than


@example

@end example

@item
@anchor{greater}greater


@example

@end example

@item
@anchor{than (2)}than


@example

@end example

@item
@anchor{equals}equals


@example

@end example

@item
@anchor{equal}equal


@example

@end example

@item
@anchor{to (1)}to


@example

@end example

@item
@anchor{different}different


@example

@end example

@item
@anchor{than (3)}than


@example

@end example

@item
@anchor{different (1)}different


@example

@end example

@item
@anchor{from (1)}from


@example

@end example
@end enumerate

@c *********************************************************************
@node Mathematical, Logical, Comparison, Operators
@subsection Mathematical

@enumerate
@item
@anchor{plus}plus


@example

@end example

@item
@anchor{minus}minus


@example

@end example

@item
@anchor{times}times


@example

@end example

@item
@anchor{divided}divided


@example

@end example

@item
@anchor{by}by


@example

@end example

@item
@anchor{modulo}modulo


@example

@end example

@item
@anchor{add}add


@example

@end example

@item
@anchor{subtract}subtract


@example

@end example

@item
@anchor{multiply}multiply


@example

@end example

@item
@anchor{divide}divide


@example

@end example

@item
@anchor{raised}raised


@example

@end example

@item
@anchor{power}power


@example

@end example

@item
@anchor{squared}squared


@example

@end example

@item
@anchor{cubed}cubed


@example

@end example

@item
@anchor{root}root


@example

@end example

@item
@anchor{square}square


@example

@end example

@item
@anchor{cube}cube


@example

@end example
@end enumerate

@c *********************************************************************
@node Logical, Arrows, Mathematical, Operators
@subsection Logical

@enumerate
@item
@anchor{not}not


@example

@end example

@item
@anchor{xor}xor


@example

@end example

@item
@anchor{and}and


@example

@end example

@item
@anchor{or}or


@example

@end example

@item
@anchor{exclusive}exclusive


@example

@end example
@end enumerate

@c *********************************************************************
@node Arrows, Algorithms, Logical, Operators
@subsection Arrows

@enumerate
@item
@anchor{resulting}resulting


@example

@end example

@item
@anchor{in (1)}in


@example

@end example

@item
@anchor{fed}fed


@example

@end example

@item
@anchor{right}right


@example

@end example

@item
@anchor{left}left


@example

@end example
@end enumerate

@c *********************************************************************
@node Algorithms, Punctuation, Operators, Syntax
@section Algorithms

@menu
* Arithmetic::
* Advanced Arithmetic::
* Statistics::
* Minimax::
* Sort::
* Scan Grade Reduce Map::
* Examinations::
* Generation::
@end menu

@c *********************************************************************
@node Arithmetic, Advanced Arithmetic, Algorithms, Algorithms
@subsection Arithmetic

@enumerate
@item
@anchor{sum}sum


@example

@end example

@item
@anchor{difference}difference


@example

@end example

@item
@anchor{product}product


@example

@end example

@item
@anchor{quotient}quotient


@example

@end example

@item
@anchor{remainder (1)}remainder


@example

@end example
@end enumerate

@c *********************************************************************
@node Advanced Arithmetic, Statistics, Arithmetic, Algorithms
@subsection Advanced Arithmetic

@enumerate
@item
@anchor{sign}sign


@example

@end example

@item
@anchor{reciprocal}reciprocal


@example

@end example

@item
@anchor{magnitude}magnitude


@example

@end example

@item
@anchor{logarithm}logarithm


@example

@end example
@end enumerate

@c *********************************************************************
@node Statistics, Minimax, Advanced Arithmetic, Algorithms
@subsection Statistics

@enumerate
@item
@anchor{average}average


@example

@end example

@item
@anchor{mean}mean


@example

@end example

@item
@anchor{median}median


@example

@end example

@item
@anchor{mode}mode


@example

@end example

@item
@anchor{range}range


@example

@end example
@end enumerate

@c *********************************************************************
@node Minimax, Sort, Statistics, Algorithms
@subsection Minimax

@enumerate
@item
@anchor{max}max


@example

@end example

@item
@anchor{maximum}maximum


@example

@end example

@item
@anchor{min}min


@example

@end example

@item
@anchor{minimum}minimum


@example

@end example

@item
@anchor{maxima}maxima


@example

@end example

@item
@anchor{minima}minima


@example

@end example

@item
@anchor{ceiling}ceiling


@example

@end example

@item
@anchor{floor}floor


@example

@end example
@end enumerate

@c *********************************************************************
@node Sort, Scan Grade Reduce Map, Minimax, Algorithms
@subsection Sort

@enumerate
@item
@anchor{and (1)}and


@example

@end example
Filter

@item
@anchor{sort}sort


@example

@end example

@item
@anchor{reverse}reverse


@example

@end example

@item
@anchor{search}search


@example

@end example

@item
@anchor{find}find


@example

@end example

@item
@anchor{filter}filter


@example

@end example

@item
@anchor{in (2)}in


@example

@end example

@item
@anchor{filter (1)}filter


@example

@end example

@item
@anchor{out}out


@example

@end example
@end enumerate

@c *********************************************************************
@node Scan Grade Reduce Map, Examinations, Sort, Algorithms
@subsection Scan, Grade, Reduce, and Map

@enumerate
@item
@anchor{and (2)}and


@example

@end example
Map

@item
@anchor{grade}grade


@example

@end example

@item
@anchor{up}up


@example

@end example

@item
@anchor{grade (1)}grade


@example

@end example

@item
@anchor{down}down


@example

@end example

@item
@anchor{scan}scan


@example

@end example

@item
@anchor{map}map


@example

@end example

@item
@anchor{reduce}reduce


@example

@end example

@item
@anchor{expand}expand


@example

@end example

@item
@anchor{replicate}replicate


@example

@end example
@end enumerate

@c *********************************************************************
@node Examinations, Generation, Scan Grade Reduce Map, Algorithms
@subsection Examinations

@enumerate
@item
@anchor{depth}depth


@example

@end example

@item
@anchor{match}match


@example

@end example

@item
@anchor{tally}tally


@example

@end example

@item
@anchor{enlist}enlist


@example

@end example

@item
@anchor{membership}membership


@example

@end example

@item
@anchor{index (1)}index


@example

@end example
@end enumerate

@c *********************************************************************
@node Generation, Punctuation, Examinations, Algorithms
@subsection Generation

@enumerate
@item
@anchor{replicating}replicating


@example

@end example

@item
@anchor{iota}iota


@example

@end example
@end enumerate

@c *********************************************************************
@node Punctuation, Strings and Characters, Algorithms, Syntax
@section Punctuation

@menu
* Period::
* Colon::
* Comma::
* Backtick::
* Double Quote::
* Single Quote::
* Question Mark::
* Exclamation Point::
@end menu

@c *********************************************************************
@node Period, Colon, Punctuation, Punctuation
@subsection Period

@c *********************************************************************
@node Colon, Comma, Period, Punctuation
@subsection Colon

@c *********************************************************************
@node Comma, Backtick, Colon, Punctuation
@subsection Comma

@c *********************************************************************
@node Backtick, Double Quote, Comma, Punctuation
@subsection Backtick

@c *********************************************************************
@node Double Quote, Single Quote, Backtick, Punctuation
@subsection Double Quote

@c *********************************************************************
@node Single Quote, Question Mark, Double Quote, Punctuation
@subsection Single Quote

@c *********************************************************************
@node Question Mark, Exclamation Point, Single Quote, Punctuation
@subsection Question Mark

@c *********************************************************************
@node Exclamation Point, Strings and Characters, Question Mark, Punctuation
@subsection Exclamation Point

@c *********************************************************************
@node Strings and Characters, Numbers and Ratios, Punctuation, Syntax
@section Strings and Characters

@c *********************************************************************
@node Numbers and Ratios, Names, Strings and Characters, Syntax
@section Numbers and Ratios

@c *********************************************************************
@node Names, Other Uses, Numbers and Ratios, Syntax
@section Names
